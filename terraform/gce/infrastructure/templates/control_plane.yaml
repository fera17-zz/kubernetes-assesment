#cloud-config
# vim: syntax=yaml

repo_update: false
repo_upgrade: all

packages:
  - build-essential
  - curl
  - gnupg2
  - htop
  - git-core
  - apt-transport-https
  - ca-certificates
  - keychain
  - unattended-upgrades
  - software-properties-common
  - google-cloud-sdk

write_files:
- path: /usr/local/bin/docker.sh
  owner: root:root
  permissions: '0750'
  content: |
    #!/bin/bash
    echo "Install Docker"
    ## Install Docker CE.
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
    add-apt-repository "deb https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") $(lsb_release -cs) stable"
    apt-get update
    apt-get install -y docker-ce=$(apt-cache madison docker-ce | grep ${docker_version} | head -1 | awk '{print $3}')
    apt-mark hold docker-ce
    ## Setup daemon.
    cat > /etc/docker/daemon.json <<EOF
    {
      "exec-opts": ["native.cgroupdriver=systemd"],
      "log-driver": "json-file",
      "log-opts": {
        "max-size": "100m"
      },
      "storage-driver": "overlay2"
    }
    EOF
    mkdir -p /etc/systemd/system/docker.service.d
    # Restart docker.
    systemctl daemon-reload
    systemctl restart docker
- path: /usr/local/bin/containerd.sh
  owner: root:root
  permissions: '0750'
  content: |
    #!/bin/bash
    containerd config default >/etc/containerd/config.toml
    systemctl restart containerd
- path: /usr/local/bin/k8s.sh
  owner: root:root
  permissions: '0750'
  content: |
    #!/bin/bash
    echo "Install Kubernetes dependencies"
    curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    cat << EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
    deb https://apt.kubernetes.io/ kubernetes-xenial main
    EOF
    apt-get update
    swap off -a
    apt-get install -y kubelet=${k8s_version}* kubeadm=${k8s_version}* kubectl=${k8s_version}* kubernetes-cni=${cni_version}*
    apt-mark hold kubelet kubeadm kubectl kubernetes-cni
- path: /usr/local/bin/iptables.sh
  owner: root:root
  permissions: '0750'
  content: |
    #!/bin/bash
    modprobe overlay
    modprobe br_netfilter
    echo "set networking"
    echo "net.bridge.bridge-nf-call-iptables=1" | sudo tee -a /etc/sysctl.conf
    echo "net.ipv4.ip_forward=1" | sudo tee -a /etc/sysctl.conf
    echo "net.bridge.bridge-nf-call-ip6tables" | sudo tee -a /etc/sysctl.conf
    sysctl -p
    sysctl --system > /tmp/networking.set.log
# Kubelet and cloud provider configs
- path: /etc/systemd/system/kubelet.service.d/20-gcenet.conf
  owner: root:root
  permissions: 0644
  content: |
    [Service]
    Environment="KUBELET_NETWORK_ARGS=--network-plugin=${network_plugin} --cni-conf-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin"
    Environment="KUBELET_DNS_ARGS=--cluster-dns=${dns_ip} --cluster-domain=${cluster_domain}"
    Environment="KUBELET_EXTRA_ARGS=--cloud-provider=gce --cgroup-driver=systemd"
- path: /etc/kubernetes/kubeadm.conf
  owner: root:root
  permissions: 0644
  content: |
    apiVersion: kubeadm.k8s.io/v1beta1
    kind: InitConfiguration
    nodeRegistration:
      kubeletExtraArgs:
        cloud-provider: gce
        cloud-config: "/etc/kubernetes/cloud-config"
    ---
    apiVersion: kubeadm.k8s.io/v1beta2
    kind: ClusterConfiguration
    kubernetesVersion: v${k8s_version}
    controlPlaneEndpoint: "${elb_dns}:${alb_port}"
    apiServer:
      certSANs:
      - ${elb_dns}
      - 127.0.0.1
      extraArgs:
        cloud-provider: gce
        cloud-config: "/etc/kubernetes/cloud-config"
    controllerManager:
      extraArgs:
        cloud-provider: gce
        cloud-config: "/etc/kubernetes/cloud-config"
    networking:
      dnsDomain: cluster.local
      podSubnet: 192.168.0.0/16
      serviceSubnet: 10.96.0.0/12

- path: /etc/kubernetes/cloud-config
  owner: root:root
  permissions: 0644
  content: |
    [Global]
    project-id = ${project}
    multizone = true
    node-tags = ${tags}
    node-instance-prefix = ${instance_prefix}
    network-project-id = ${project}
    network-name = ${network_name}
    subnetwork-name = ${subnetwork_name}
    enable-admission-plugins = NamespaceAutoProvision,Initializers,NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,ResourceQuota,PodTolerationRestriction
runcmd:
- echo "set ip tables"
- "/usr/local/bin/iptables.sh"
- echo "set docker dependencies"
- "/usr/local/bin/docker.sh"
- "/usr/local/bin/containerd.sh"
- echo "set kubernetes dependencies"
- "/usr/local/bin/k8s.sh"
- systemctl daemon-reload
- systemctl enable docker
- systemctl start docker
- ls -la /tmp

output:
  output: { all: "| tee -a /var/log/cloud-init-output.log" }

final_message: "The system is up, after $UPTIME seconds"
